// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: role_permission.sql

package db

import (
	"context"
)

const createRolePermission = `-- name: CreateRolePermission :one
INSERT INTO role_permissions (role_id, resource_id, can_read, can_write, can_delete)
VALUES (?,
        ?,
        ?,
        ?,
        ?)
RETURNING id, role_id, resource_id, can_read, can_write, can_delete, created_at
`

type CreateRolePermissionParams struct {
	RoleID     int64 `json:"role_id"`
	ResourceID int64 `json:"resource_id"`
	CanRead    bool  `json:"can_read"`
	CanWrite   bool  `json:"can_write"`
	CanDelete  bool  `json:"can_delete"`
}

func (q *Queries) CreateRolePermission(ctx context.Context, arg CreateRolePermissionParams) (RolePermission, error) {
	row := q.db.QueryRowContext(ctx, createRolePermission,
		arg.RoleID,
		arg.ResourceID,
		arg.CanRead,
		arg.CanWrite,
		arg.CanDelete,
	)
	var i RolePermission
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.ResourceID,
		&i.CanRead,
		&i.CanWrite,
		&i.CanDelete,
		&i.CreatedAt,
	)
	return i, err
}

const getRolePermissions = `-- name: GetRolePermissions :one
SELECT id, role_id, resource_id, can_read, can_write, can_delete, created_at
FROM role_permissions
WHERE role_id = ?
  AND resource_id = ?
`

type GetRolePermissionsParams struct {
	RoleID     int64 `json:"role_id"`
	ResourceID int64 `json:"resource_id"`
}

func (q *Queries) GetRolePermissions(ctx context.Context, arg GetRolePermissionsParams) (RolePermission, error) {
	row := q.db.QueryRowContext(ctx, getRolePermissions, arg.RoleID, arg.ResourceID)
	var i RolePermission
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.ResourceID,
		&i.CanRead,
		&i.CanWrite,
		&i.CanDelete,
		&i.CreatedAt,
	)
	return i, err
}

const updateRolePermissions = `-- name: UpdateRolePermissions :one
UPDATE role_permissions
SET can_read   = ?,
    can_write  = ?,
    can_delete = ?
WHERE role_id = ?
  AND resource_id = ?
RETURNING id, role_id, resource_id, can_read, can_write, can_delete, created_at
`

type UpdateRolePermissionsParams struct {
	CanRead    bool  `json:"can_read"`
	CanWrite   bool  `json:"can_write"`
	CanDelete  bool  `json:"can_delete"`
	RoleID     int64 `json:"role_id"`
	ResourceID int64 `json:"resource_id"`
}

func (q *Queries) UpdateRolePermissions(ctx context.Context, arg UpdateRolePermissionsParams) (RolePermission, error) {
	row := q.db.QueryRowContext(ctx, updateRolePermissions,
		arg.CanRead,
		arg.CanWrite,
		arg.CanDelete,
		arg.RoleID,
		arg.ResourceID,
	)
	var i RolePermission
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.ResourceID,
		&i.CanRead,
		&i.CanWrite,
		&i.CanDelete,
		&i.CreatedAt,
	)
	return i, err
}
