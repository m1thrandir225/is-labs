// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: role.sql

package db

import (
	"context"
)

const createInitialRoles = `-- name: CreateInitialRoles :exec
INSERT INTO roles (name, org_id)
VALUES ('user', ?1),
       ('admin', ?1),
       ('moderator', ?1)
`

func (q *Queries) CreateInitialRoles(ctx context.Context, orgID int64) error {
	_, err := q.db.ExecContext(ctx, createInitialRoles, orgID)
	return err
}

const createRole = `-- name: CreateRole :one
INSERT INTO roles (name, org_id)
VALUES (?, ?)
RETURNING id, name, org_id, created_at
`

type CreateRoleParams struct {
	Name  string `json:"name"`
	OrgID int64  `json:"org_id"`
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, createRole, arg.Name, arg.OrgID)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OrgID,
		&i.CreatedAt,
	)
	return i, err
}

const getAdminRole = `-- name: GetAdminRole :one
SELECT id FROM roles WHERE name = 'admin' AND org_id = ?
`

func (q *Queries) GetAdminRole(ctx context.Context, orgID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getAdminRole, orgID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getModeratorRole = `-- name: GetModeratorRole :one
SELECT id FROM roles WHERE name = 'moderator' AND org_id = ?
`

func (q *Queries) GetModeratorRole(ctx context.Context, orgID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getModeratorRole, orgID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getRole = `-- name: GetRole :one
SELECT id, name, org_id, created_at
FROM roles
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetRole(ctx context.Context, id int64) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRole, id)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OrgID,
		&i.CreatedAt,
	)
	return i, err
}

const getUserRole = `-- name: GetUserRole :one
SELECT r.name as role_name
FROM user_organizations uo
         JOIN roles r ON uo.role_id = r.id
WHERE uo.user_id = ?
  AND uo.org_id = ?
`

type GetUserRoleParams struct {
	UserID int64 `json:"user_id"`
	OrgID  int64 `json:"org_id"`
}

func (q *Queries) GetUserRole(ctx context.Context, arg GetUserRoleParams) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserRole, arg.UserID, arg.OrgID)
	var role_name string
	err := row.Scan(&role_name)
	return role_name, err
}

const getUserRoleId = `-- name: GetUserRoleId :one
SELECT id FROM roles WHERE name = 'user' AND org_id = ?
`

func (q *Queries) GetUserRoleId(ctx context.Context, orgID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUserRoleId, orgID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const listOrganizationRoles = `-- name: ListOrganizationRoles :many
SELECT id, name, org_id, created_at
FROM roles
WHERE org_id = ?
ORDER BY created_at
`

func (q *Queries) ListOrganizationRoles(ctx context.Context, orgID int64) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, listOrganizationRoles, orgID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Role{}
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.OrgID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
