// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: organization.sql

package db

import (
	"context"
)

const createOrganization = `-- name: CreateOrganization :one
INSERT INTO organizations (name)
VALUES (?)
RETURNING id, name, created_at
`

func (q *Queries) CreateOrganization(ctx context.Context, name string) (Organization, error) {
	row := q.db.QueryRowContext(ctx, createOrganization, name)
	var i Organization
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const deleteOrganization = `-- name: DeleteOrganization :exec
DELETE
FROM organizations
WHERe id = ?
`

func (q *Queries) DeleteOrganization(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteOrganization, id)
	return err
}

const getOrganization = `-- name: GetOrganization :one
SELECT id, name, created_at
FROM organizations
WHERE id = ?
`

func (q *Queries) GetOrganization(ctx context.Context, id int64) (Organization, error) {
	row := q.db.QueryRowContext(ctx, getOrganization, id)
	var i Organization
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}
