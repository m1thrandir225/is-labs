// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    email,
    password_hash,
    secret_key,
    counter
) VALUES (
        ?,
        ?,
        ?,
        ?
) RETURNING id, email, password_hash, secret_key, counter
`

type CreateUserParams struct {
	Email        string `json:"email"`
	PasswordHash string `json:"password_hash"`
	SecretKey    string `json:"secret_key"`
	Counter      int64  `json:"counter"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.PasswordHash,
		arg.SecretKey,
		arg.Counter,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.SecretKey,
		&i.Counter,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password_hash, secret_key, counter
FROM users
WHERE email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.SecretKey,
		&i.Counter,
	)
	return i, err
}

const updateUserCounter = `-- name: UpdateUserCounter :exec
UPDATE users
SET counter = ?
WHERE id = ?
`

type UpdateUserCounterParams struct {
	Counter int64 `json:"counter"`
	ID      int64 `json:"id"`
}

func (q *Queries) UpdateUserCounter(ctx context.Context, arg UpdateUserCounterParams) error {
	_, err := q.db.ExecContext(ctx, updateUserCounter, arg.Counter, arg.ID)
	return err
}
