// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_organization.sql

package db

import (
	"context"
)

const addUserToOrganization = `-- name: AddUserToOrganization :one
INSERT INTO user_organizations (user_id, org_id, role_id)
VALUES (?,
        ?,
        ?)
RETURNING id, user_id, org_id, role_id, created_at
`

type AddUserToOrganizationParams struct {
	UserID int64 `json:"user_id"`
	OrgID  int64 `json:"org_id"`
	RoleID int64 `json:"role_id"`
}

func (q *Queries) AddUserToOrganization(ctx context.Context, arg AddUserToOrganizationParams) (UserOrganization, error) {
	row := q.db.QueryRowContext(ctx, addUserToOrganization, arg.UserID, arg.OrgID, arg.RoleID)
	var i UserOrganization
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OrgID,
		&i.RoleID,
		&i.CreatedAt,
	)
	return i, err
}

const getUserOrganization = `-- name: GetUserOrganization :one
SELECT id, user_id, org_id, role_id, created_at
FROM user_organizations
WHERE user_id = ?
  AND org_id = ?
`

type GetUserOrganizationParams struct {
	UserID int64 `json:"user_id"`
	OrgID  int64 `json:"org_id"`
}

func (q *Queries) GetUserOrganization(ctx context.Context, arg GetUserOrganizationParams) (UserOrganization, error) {
	row := q.db.QueryRowContext(ctx, getUserOrganization, arg.UserID, arg.OrgID)
	var i UserOrganization
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OrgID,
		&i.RoleID,
		&i.CreatedAt,
	)
	return i, err
}

const listUserOrganizations = `-- name: ListUserOrganizations :many
SELECT id, user_id, org_id, role_id, created_at
FROM user_organizations
WHERE user_id = ?
ORDER BY created_at
`

func (q *Queries) ListUserOrganizations(ctx context.Context, userID int64) ([]UserOrganization, error) {
	rows, err := q.db.QueryContext(ctx, listUserOrganizations, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserOrganization{}
	for rows.Next() {
		var i UserOrganization
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.OrgID,
			&i.RoleID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeUserFromOrganization = `-- name: RemoveUserFromOrganization :exec
DELETE FROM user_organizations
WHERE org_id = ? AND user_id = ?
`

type RemoveUserFromOrganizationParams struct {
	OrgID  int64 `json:"org_id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) RemoveUserFromOrganization(ctx context.Context, arg RemoveUserFromOrganizationParams) error {
	_, err := q.db.ExecContext(ctx, removeUserFromOrganization, arg.OrgID, arg.UserID)
	return err
}

const updateUserOrganizationRole = `-- name: UpdateUserOrganizationRole :exec
UPDATE user_organizations
SET role_id = ?
WHERE user_id = ? AND org_id = ?
`

type UpdateUserOrganizationRoleParams struct {
	RoleID int64 `json:"role_id"`
	UserID int64 `json:"user_id"`
	OrgID  int64 `json:"org_id"`
}

func (q *Queries) UpdateUserOrganizationRole(ctx context.Context, arg UpdateUserOrganizationRoleParams) error {
	_, err := q.db.ExecContext(ctx, updateUserOrganizationRole, arg.RoleID, arg.UserID, arg.OrgID)
	return err
}
