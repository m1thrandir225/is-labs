// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: hotp_counters.sql

package db

import (
	"context"
)

const cleanupExpiredCounters = `-- name: CleanupExpiredCounters :exec
DELETE FROM hotp_counters
WHERE last_used_timestamp < datetime('now', '-30 days')
`

func (q *Queries) CleanupExpiredCounters(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, cleanupExpiredCounters)
	return err
}

const createHotpCounter = `-- name: CreateHotpCounter :exec
INSERT INTO hotp_counters (user_id, counter)
VALUES (?, ?)
ON CONFLICT (user_id) DO NOTHING
`

type CreateHotpCounterParams struct {
	UserID  int64 `json:"user_id"`
	Counter int64 `json:"counter"`
}

func (q *Queries) CreateHotpCounter(ctx context.Context, arg CreateHotpCounterParams) error {
	_, err := q.db.ExecContext(ctx, createHotpCounter, arg.UserID, arg.Counter)
	return err
}

const getCurrentCounter = `-- name: GetCurrentCounter :one
SELECT counter
FROM hotp_counters
WHERE user_id = ?
`

func (q *Queries) GetCurrentCounter(ctx context.Context, userID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getCurrentCounter, userID)
	var counter int64
	err := row.Scan(&counter)
	return counter, err
}

const increaseCounter = `-- name: IncreaseCounter :one
UPDATE hotp_counters
SET counter = counter + 1, last_used_timestamp = CURRENT_TIMESTAMP
WHERE user_id = ?
RETURNING  counter
`

func (q *Queries) IncreaseCounter(ctx context.Context, userID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, increaseCounter, userID)
	var counter int64
	err := row.Scan(&counter)
	return counter, err
}
